- title: الفصل 1 - الأساسيات
  content_markdown: >
    سنستكشف في هذا الفصل الأول الأساسيات المتعلقة بالدوال، المتغيرات والأنواع الأكثر بدائية. سعيد بوجودك بهذه الدورة!


    أيضًا! إذا كنت تتساءل من هذا السلطعون الرائع الذي يتحدث إليك، فأنا **فيريس**،
    التميمة غير الرسمية للغة البرمجة Rust. سعيد بلقائك.


    بمجرد أن تصبح متعود على Rust، يمكنك أن تلقب نفسك بـ **Rustacean**. تلك هي العبارة التي يطلق الأشخاص الذين يستخدمون Rust أو يساهمون فيه أو يهتمون به على أنفسهم.

- title: أداة أرضية تشغيل رست (The Rust Playground)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20println!(%22Welcome%20to%20the%20playground!%20You%20can%20modify%20the%20code%20in%20here.%22)%3B%0A%7D%0A
  content_markdown: >
    سيتم إستخدام في هذه الدروة أداة تفاعلية من [Rust
    Playground](https://play.rust-lang.org).


    إنها طريقة رائعة لتشغيل وتطبيق Rust وإظهار إبداعاتك وتحدياتك للآخرين!
    
- title: المتغيرات
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20rust%20infers%20the%20type%20of%20x%0A%20%20%20%20let%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%20can%20also%20be%20explicit%20about%20the%20type%0A%20%20%20%20let%20x%3A%20f64%20%3D%203.14159%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%20can%20also%20declare%20and%20initialize%20later%2C%20but%20this%20is%20rarely%20done%0A%20%20%20%20let%20x%3B%0A%20%20%20%20x%20%3D%200%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: >
    يتم التعريف بمتغير جديد بإستعمال الكلمة المفتاحية **let**.
    
    
    عندما يتم تعيين قيمة للمتغير، فإن رست (Rust) يمكنها أن تستنتج نوع المتغير بنسة 99%.


    أما إذا لم تتمكن اللغة من إستنتاج نوع المتغير فإنه يتوجب عليك حينها إضافة نوع المتغبر الذي قمت بتعريفه به.


    لاحظ في المثال المقابل كيف يمكنك تعريف نفس اسم المتغير عدة مرات. وهذا ما يسمى بتظليل المتغير (variable shadowing) - من الظل -، والنوع يمكن تغييره في المراجع اللاحقة (subsequent references) لذلك الاسم.
    
    
    أسماء معرفات المتغيرات دائما تكون بطريقة الثعبان `snake_case`.

- title: تغيير قيم المتغيرات
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%2042%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: >
    يهتم رست (Rust) كثيرا بكيفية تعديل قيم المتغيرات. وهنا تنقسم القيم الى صنفين:
    

    * **قيم قابلة للتغيير (mutable)** - في هذه الحالة يسمح المترجم (compiler) بأن يكون المتغير قابل للكتابة (أي التعديل) والقراءة منه.


    * **قيم غير قابلة للتغيير (immutable)** - وهنا المترجم (compiler) يسمح فقط بأن يكون المتغير قابل للقراءة فقط.
    
    
    ويتم الإشارة إلى أن القيم قابلة للتغيير بالكلمة المفتاحية **mut** تضاف أثناء تعريف المتغير.
    

    سيكون لدينا المزيد لنقوله حول هذا المفهوم لاحقًا، ولكن في الوقت الحالي ألق نظرة فقط على هذه الكلمة المفتاحية.
- title: الأنواع الأساسية
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2012%3B%20%2F%2F%20by%20default%20this%20is%20i32%0A%20%20%20%20let%20a%20%3D%2012u8%3B%0A%20%20%20%20let%20b%20%3D%204.3%3B%20%2F%2F%20by%20default%20this%20is%20f64%0A%20%20%20%20let%20c%20%3D%204.3f32%3B%0A%20%20%20%20let%20bv%20%3D%20true%3B%0A%20%20%20%20let%20t%20%3D%20(13%2C%20false)%3B%0A%20%20%20%20let%20sentence%20%3D%20%22hello%20world!%22%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20x%2C%20a%2C%20b%2C%20c%2C%20bv%2C%20t.0%2C%20t.1%2C%20sentence%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: >
    رست (Rust) لديها مجموعة متنوعة من الأنواع المألوفة:


    * القيم المنطقية (booleans) - `bool` من أجل تمثيل قيمة صحيح أو خطأ
    
    * الأعداد الصحيحة بدون إشارة (unsigned integers) - يرمز لها بـ `u8` `u16` `u32` `u64` `u128` وتمثل كل الأعداد الغير سالبة (الأعداد الموجبة).
    
    * الأعداد الصحيحة بإشارة (signed integers) - يرمز لها بـ `i8` `i16` `i32` `i64` `i128` وتمثل كل الأعداد.

    * الأعداد الصحيحة بحجم المؤشر (pointer-sized integers) - يرمز لها بـ `isize` `usize`  وهي لتمثيل الفهارس وأحجام الأشياء في الذاكرة، وللفهم أكثر فإن size هنا تتغير عند ترجمة البرنامج (compiling) حسب بنية النظام فهي تأخذ قيمة  32 بت (usize = u32) في البرامج الموجه للحواسب x86 و تأخذ قيمة 64 بت (usize = u64) في البرامج الموجهة للحواسب x86_64، إذن usize تضمن حجز الحجم الكافي في الذاكرة لأي مؤشر حسب بنية البيانات.

    * الأعداد العشرية (floating point) - يرمز لها بـ `f32` `f64` تمثل كل الأعداد التي تملك قسمًا عشريًا إضافةً إلى القسم الصحيح.

    * الصفوف (tuples) - تكتب بهذا الشكل `(value, value, ...)` هي مجموعة متسلسة ثابة من القيم بأنواع مختلفة والتي تمرر الى المكدس (Stack).
    
    * المصفوفات (arrays) - تكتب بهذا الشكل `[value, value, ...]` هي مجموعة متسلسة من العناصر متشابهة الأنواع وبطول ثابت ومعلوم أثناء الترجمة (compile time).

    * الشرائح (slices) - هو مفهوم يعبر عن مجموعة متسلسة من العناصر متشابهة الأنواع وبطول ثابت ومعلوم أثناء تشغيل البرنامج (runtime).
    
    * الشرائح النصية (string slice) - يرمز لها بـ `str` وهي نص (كل حرف يمثل شريحة) بطول معلوم أثناء تشغيل البرنامج (runtime).


    قد يكون النص في لغة رست (Rust) أكثر تعقيدًا مما اعتدت عليه في اللغات الأخرى؛ نظرا لأن رست (Rust) هي لغة برمجة أنظمة، فهو يهتم بمشاكل الذاكرة التي قد لا تكون معتادًا عليها. وسنتناول هذا بالتفصيل لاحقًا.


    وكمعلومة إضافية فإنه بالإمكان تحديد نوع المتغير عندما يكون من الانواع الرقمية (Numeric types) عن طريق إضافة النوع في نهاية قيمة العدد (مثال: `13u32`, `2u8`).
    
    
    معلومات أخرى:


    * [ويكيبيديا: المكدس (Stack)](https://ar.wikipedia.org/wiki/%D9%85%D9%83%D8%AF%D8%B3_(%D8%A8%D9%86%D9%8A%D8%A9_%D8%A8%D9%8A%D8%A7%D9%86%D8%A7%D8%AA))

- title: تحويل الأنواع الأساسية
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%2013u8%3B%0A%20%20%20%20let%20b%20%3D%207u32%3B%0A%20%20%20%20let%20c%20%3D%20a%20as%20u32%20%2B%20b%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20c)%3B%0A%0A%20%20%20%20let%20t%20%3D%20true%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20t%20as%20u8)%3B%0A%7D%0A
  content_markdown: >
    يطلب رست (Rust) منك أن تكون واضحا عندما تتعامل مع الأنواع الرقمية. بحيث لا يمكنك إستخدام نوع `u8` لمتغير من نوع `u32` بدون ظهور أخطاء.


    طبعا من حسن الحظ، فإن رست (Rust) يبسط جدا تحويل الأنواع الرقمية عن طريق الكلمة المفتاحية **as**.

- title: الثوابت (Constants)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=const%20PI%3A%20f32%20%3D%203.14159%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22To%20make%20an%20apple%20%7B%7D%20from%20scratch%2C%20you%20must%20first%20create%20a%20universe.%22%2C%0A%20%20%20%20%20%20%20%20PI%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: >
    تسمح لنا الثوابت بتعيين قيمة مشتركة ثابتة يتم استخدامها في الكود الخاص بنا عدة مرات بكفاءة. وذلك عوض نسخ القيم لما يتم استخدام المتغيرات، بحيث تحدث عملية استبدال للمعرف النصي للثابت بقيمته أثناء الترحمة (compile time) مباشرة. 
    
    
    على عكس المتغيرات، فإنه يجب إضافة نوع الثابت دائمًا عند تعريفه.


    أسماء معرفات الثوابت دائما تكون بطريقة الثعبان كبيرة الأحرف `SCREAMING_SNAKE_CASE`.

- title: المصفوفات (Arrays)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20nums%3A%20%5Bi32%3B%203%5D%20%3D%20%5B1%2C%202%2C%203%5D%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20nums)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20nums%5B1%5D)%3B%0A%7D%0A
  content_markdown: >
    *المصفوفة (array)* هي **مجموعة ثابتة الطول** من عناصر البيانات كلها لها نفس النوع.


    نوع البيانات للـ *مصفوفة (array)* يكتب بهذا الشكل `[T;N]` حيث T هو نوع العناصر و N يمثل الطول الثابت والمعلوم أثناء ترجمة البرنامج (compile-time).


    يمكن إستخراج عناصر بشكل فردي عن طريق كتابة عامل بهذا الشكل `[x]` وتمثل *x* عدد من نوع *usize* (عدد صحيح موجب) يشير إلى ترتيب العنصر في فهرس (index) المصفوفة ويبدأ من 0.


    أما بالنسبة للمجموعات ذات الأطوال المتغيرة فتسمى غالبا بالمصفوفات المتغير (variable arrays) أو الديناميكية (dynamic arrays)،  سيتم التطرق إليها لاحقا في فصل يتحدث حول **Vectors**.  
- title: الدوال (Functions)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20add(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20i32%20%7B%0A%20%20%20%20return%20x%20%2B%20y%3B%0A%7D%0A%0Afn%20subtract(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20i32%20%7B%0A%20%20%20%20x%20-%20y%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%2242%20%2B%2013%20%3D%20%7B%7D%22%2C%20add(42%2C%2013))%3B%0A%20%20%20%20println!(%2242%20-%2013%20%3D%20%7B%7D%22%2C%20subtract(42%2C%2013))%3B%0A%7D%0A
  content_markdown: >
    تُعرَّف الدوال باستخدام الكلمة المفتاحية `fn` ويمكن أن تحمل صفر أو عدة معلمات (parameters) وهي التي تكون محاطة بالأقواس.


    في هذا المثال،  الدالة *add* تأخذ وسيطتين (arguments) من نوع `i32` (عدد صحيح بإشارة ذو طول 32 بت).


    إذا اردت إرجاع عبارة (expression)، يمكنك الإستغناء عن الكلمة المفتاحية `return` و الفاصلة المنقوطة (semicolon) في آخر السطر،  كما هو مبين في المثال مع الدالة *subtract*.


    أسماء معرفات الدوال دائما تكون بطريقة الثعبان `snake_case`.


    تلميح: إذا قمت بتعريف دالة، فإن البيانات التي تقبلها تدعى بـالمعلمات(parameters). وإذا قمت بإستدعاءالدالة ومررت لها بيانات فإنها حينئذ تدعى بالوسيطات (arguments). إذا المعلمة هي المتغير المدرج داخل الأقواس في تعريف الدالة. أما الوسيطة هي القيمة التي يتم إرسالها إلى الدالة عند استدعائها.

- title: إرجاع قيم عديدة
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20swap(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20(i32%2C%20i32)%20%7B%0A%20%20%20%20return%20(y%2C%20x)%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20return%20a%20tuple%20of%20return%20values%0A%20%20%20%20let%20result%20%3D%20swap(123%2C%20321)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20result.0%2C%20result.1)%3B%0A%0A%20%20%20%20%2F%2F%20destructure%20the%20tuple%20into%20two%20variables%20names%0A%20%20%20%20let%20(a%2C%20b)%20%3D%20swap(result.0%2C%20result.1)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%7D%0A
  content_markdown: >
    يمكن أن ترجع الدوال عدد من القيم على شكل **صف (tuple)** من القيم.


    ويمكن الوصول إلى عناصر الصف (tuple) عن طريق رقم ترتيبها في الفهرس (index).  


    يدعم رست (Rust) أنواعًا مختلفة من التفكيك (destructuring) والتي نراها في أشكال عديدة، تسمح لنا باستخراج أجزاء فرعية من هياكل البيانات بطرق مريحة. أرجو أن تكون متنبهاً لها! 
- title: إرجاع لاشء
  content_markdown: >
    إذا لم يتم تحديد نوع الإرجاع للدالة (function)، فإنها تُرجع صفًا (tuple) فارغًا، يُعرف أيضًا باسم *الوحدة (unit)*.


    يرمز للصف (tuple) الفارغ بـ `()`.


    إن إستخدام الرمز `()` غير شائع، ولكنه قد يصادفك أحيانا وهو جيد لتوضيح ما يحدث فعليا في الدالة.

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20make_nothing()%20-%3E%20()%20%7B%0A%20%20%20%20return%20()%3B%0A%7D%0A%0A%2F%2F%20the%20return%20type%20is%20implied%20as%20()%0Afn%20make_nothing2()%20%7B%0A%20%20%20%20%2F%2F%20this%20function%20will%20return%20()%20if%20nothing%20is%20specified%20to%20return%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20make_nothing()%3B%0A%20%20%20%20let%20b%20%3D%20make_nothing2()%3B%0A%0A%20%20%20%20%2F%2F%20Printing%20a%20debug%20string%20for%20a%20and%20b%0A%20%20%20%20%2F%2F%20Because%20it's%20hard%20to%20print%20nothingness%0A%20%20%20%20println!(%22The%20value%20of%20a%3A%20%7B%3A%3F%7D%22%2C%20a)%3B%0A%20%20%20%20println!(%22The%20value%20of%20b%3A%20%7B%3A%3F%7D%22%2C%20b)%3B%0A%7D%0A
- title: الفصل 1 - الخلاصة
  content_markdown: >
    عمل جميل حتى الآن! أساسيات رست (Rust) ليست صعبة للغاية، أليس كذلك؟ لقد ألقينا نظرة خاطفة على كيفية تفكير مترجم رست (Rust compiler). باعتبارها لغة برمجة نظام، فرست (Rust) تهتم كثيرًا بحجم القيم في الذاكرة، وما إذا كان يمكن تعديل الأشياء أم لا، والتأكد من أن حساباتك هي ما تريد أن تكون عليه.
    
    
     بعد ذلك سنلقي نظرة على بعض الأصدقاء القدامى:
     
     
     اختبارات (tests) `if` وحلقات (loops) `for`.


     المزيد من الموارد:


    * [يوتيوب: Rust Cast - A deeper dive on Rust's primitive number
    types](https://www.youtube.com/watch?v=n5TRBkbystY)

    * [موقع ويب: Rust Book 2018 - A deeper description on basic data
    types](https://doc.rust-lang.org/1.30.0/book/2018-edition/ch03-02-data-types.html)

    * [موقع ويب: Rust Cheat Sheet - Data Types](https://cheats.rs/#basic-types)
    
    
    
    
