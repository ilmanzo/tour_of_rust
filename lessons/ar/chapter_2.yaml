- title: الفصل 2 - بنى التحكم الأساسية (Basic Control Flow)
  content_markdown: >
    في هذا الفصل دعونا نتحدث على طرق بنى التحكم الأساسية في رست (Rust)


    إذا كنت تألف اللغات المعتمدة على سي (C based languages)، فستشعر بأنك على مايرام وربما تستمتع بمفاجأة أو اثنتين.
- title: إذا / غير ذلك (if/else)
  content_markdown: >
    تفرع التعليمات البرمجية في رست (Rust) ليس مفاجئًا.


     الشروط في رست (Rust) لا تحتوي على قوسين! هل كنا حقا بحاجة إليهم؟ يبدو منطق اللغة لطيفًا ونظيفًا.


     كل عوامل التشغيل العلائقية والمنطقية المعتادة (relational and logical operators) لا تزال تعمل: `==`, `!=`, `<`, `>`, `<=`, `>=`, `!`, `||`, `&&`.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22less%20than%2042%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22is%2042%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22greater%20than%2042%22)%3B%0A%20%20%20%20%7D%0A%7D
- title: الحلقة (loop)
  content_markdown: |
    اتحتاج إلى حلقة لا نهائية؟
    
    
    رست (Rust) يجعلها سهلة.
    
    
    الكلمة المفتاحية `break` سوف تفلتك (تخرجك) من الحلقة عندما تكون مستعدًا.
    
    
    الحلقة `loop` لديها سر سنتحدث عنه قريبا.
   
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: طالما (while)
  content_markdown: |
    الكلمة الفتاحية `while` (طالما) تمكنك من إضافة شروط للحلقة (loop).
    
    
    وطالما الشرط صحيح `true` فالحلقة تستمر، أما إذا كان تقييم الشرط هو خطأ `false`، سوف تخرج من الحلقة (loop).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22x%20is%20%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: مِنْ أجْلِ (for)
  content_markdown: >
    حلقة (loop) من أجل `for` في رست (Rust) تعتبر ترقية قوية. فهي تتكرر بناءا على مرورها على قيم أي عبارة يمكن تقيمها داخل المكرِرْ (iterator).
  
  
    ماهو المكرِرْ (iterator)؟ هو كائن (object) يمكنك أن تطرح عليه (بالتعبير المجازي) السؤال التالي "ماهو العنصر التالي الذي عندك في القائمة؟" حتى يرد بعدم الوجود عناصر أخرى. سنكتشف المزيد عليه في فصل آخر مستقبلا.
  
  
    حاليا في هذا المثال رست (Rust) يمكنك من إنشاء مكررات تولد سلسلة من الاعداد الصحيحة. و المعامل `..` ينشء لك مكرِرْ (iterator) يولد أعداد من عدد بداية حتى عدد نهاية لا يتم تضمينه في المجموعة (في الرياضيات نكتب  [n..,x[).  أما المعامل `..=` فهو ينشئ مكرِرْ (iterator) يولد أعداد من عدد بداية حتى عدد نهاية يتم تضمينه في المجموعة (في الرياضيات نكتب  [n..,x])

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: مُطابقة (match)
  content_markdown: >
    هل تفتقد عبارة التبديل (switch statement)؟ يحتوي رست (Rust) على كلمة فتاحية مفيدة بشكل لا يصدق لمطابقة جميع الشروط الممكنة للقيمة وتنفيذ تعليمات برمجية إذا كانت المطابقة صحيحة. 
    
    
    دعنا نرى في المثال المقابل كيف تعمل مع الارقام. سوف يكون لدينا الكثير لنقوله في الفصول القادمة حول أنماط مطابقة ذات بيانات أكثر تعقيدا. أعدك أنه يستحق الانتظار. 
    
    
    مُطابقة `match` تكون شاملة لذا فإنها تتعامل مع جميع الحالات.
     
     
    المطابقة المدموجة مع التفكيك هي أحد الأنماط الأكثر شيوعا التي ستراها في لغة رست (Rust) كلها.
    
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20multiple%20values%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%201%20or%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20ranges%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20a%20number%203%20to%209%20inclusively%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20bind%20the%20matched%20number%20to%20a%20variable%0A%20%20%20%20%20%20%20%20matched_num%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20%7B%7D%20number%20between%2010%20to%20100!%22%2C%20matched_num)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20this%20is%20the%20default%20match%20that%20must%20exist%20if%20not%20all%20cases%20are%20handled%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20something%20else!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A
- title: إرجاع قيم من الحلقات (loop)
  content_markdown: |
    الحلقة `loop` تستطيع أن تنقطع (break) وترجع قيمة، وذلك عند إضافة القيمة بعد الكلمة المفتاحية `break`.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%22found%20the%2013%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20loop%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A
- title: إرجاع قيم من كتلة التعبيرات (Block Expressions)
  content_markdown: >
    إذا (`if`)، مُطابقة (`match`)، الدوال (functions)، أو كتلة النطاق (scope block) كلهم يملكون طريقة واحدة لإرجاع القيم في رست (Rust)
  
  
    وإذا كانت آخر عبارة (statement) في إذا (`if`)، مُطابقة (`match`)، الدوال (functions)، أو كتلة النطاق (scope block) هو تعبير (expression) بدون فاصلة منقوطة `;`، فإن رست (Rust) سوف يرجعها كقيمة من الكتلة (block). وهذه طريقة رائعة لإنشاء منطق موجز يُرجع قيمة يمكن وضعها في متغير جديد.
  
  
    لاحظ في المثال أن رست (Rust) يسمح لعبارة `if` بالعمل عندما تكتب على شكل تعبير ثلاثي موجز.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20Rust's%20ternary%20expression%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22from%20if%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22hamburger%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22hotdog%22%20%3D%3E%20%22is%20hotdog%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20notice%20the%20braces%20are%20optional%20when%20its%20just%20a%20single%20return%20expression%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22is%20not%20hotdog%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22identifying%20food%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20scope%20block%20lets%20us%20get%20a%20result%20without%20polluting%20function%20scope%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20block%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20The%20idiomatic%20way%20to%20return%20a%20value%20in%20rust%20from%20a%20function%20at%20the%20end%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22from%20function%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: الفصل 2 - الخلاصة
  content_markdown: >
    آمل أن أكون قد أعطيتكم لمحة عن قوة رست (Rust) حتى في ميزات اللغة بدائية جدا. سوف نتكلم على من أجل `for` و مُطابقة `match` بشكل معمق حتى نكتسب المعرفة التي تمكننا من الاستفادة من قدراتهما. في المرة القادمة سوف نتناول هياكل البيانات الأساسية لـ Rust.
