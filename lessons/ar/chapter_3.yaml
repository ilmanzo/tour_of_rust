- title: الفصل 3 - أنواع هياكل البيانات الأساسية
  content_markdown: >
    لقد حان الوقت لاستكشاف ما هو أبعد من الأنواع الأساسية (Basic Types)! حيث سنتطرق في هذا الفصل إلى هياكل البيانات البدائية (primitive data structures) جدا في رست (Rust)، ونولي أهمية إلى كيفية تمثيلها في الذاكرة. أعتقد أنك ستستمتع بالقليل من الذي يخفيه عنك رست (Rust) حول كيفية عمل الأشياء.
- title: الهياكل (Structures)
  content_markdown: >
    الهيكل (`struct`) هو مجموعة من الحقول (fields).


    *الحقل (field)* هو بكل بساطة قيمة بيانات مرتبطة بهيكل البيانات (data structure). ويمكن أن تكون قيمة هذه البيانات من النوع البدائي (primitive type) أو هيكل بيانات (data structure). 


    يمكن تعريفه كمخطط (blueprint) من أجل المترجم (compiler) يوضح له كيفية تَرتِيب وتنظيم الحقول في الذاكرة بالقرب من بعضها البعض.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20is%20a%20struct%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D
- title: إستدعاء التوابع (Methods)
  content_markdown: >
    على عكس الدوال (functions)، فإن التوابع (methods) هي دوال مرتبطة بنوع بيانات محدد. 


    التوابع الساكنة **static methods** — وهي توابع (methods) تنتمي الى النوع نفسه ويتم استدعاؤها باستخدام العامل `::`.


    توابع المثيل **instance methods** — وهي توابع (methods) تنتمي الى مثيل النوع (instance of a type) ويتم استدعاؤها باستخدام العامل `.`.


    سنتحدث أكثر عن طريقة بناء توابع (methods) خاصة بناء في الفصول القادمة.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Using%20a%20static%20method%20to%20create%20an%20instance%20of%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20Using%20a%20method%20on%20the%20instance%0A%20%20%20%20println!(%22%7B%7D%20is%20%7B%7D%20characters%20long.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: الذاكرة (Memory)
  content_markdown: >
    تملك برامج رست (Rust) ثلاث مناطق ذاكرة أين يتم تخزين البيانات فيها:

    * **ذاكرة البيانات (data memory)** - من أجل البيانات ثابتة الحجم و ساكنة (**static**) - على سبيل المثال: البيانات المتوفرة دائمًا طوال عمر البرنامج -. نأخذ مثلا النص الموجود في برنامجك مرحبا بالعالم ("Hello World!"): فبايتات (bytes) هذا النص يتم قراءتها إلا من مكان واحد وبالتالي يمكن تخزينها في هذه المنطقة. ويقوم مترجمو اللغة (Compilers) بالعديد من التحسينات على هذا النوع من البيانات وعلى العموم فالوصول الى هذه البيانات يعتبر سريعا جدا بإعتبار الموقع معلوم وثابت.
    
    * **ذاكرة المكدس (stack memory)** - وهي للبيانات التي تم التصريح عليها كمتغيرات ضمن دالة (function). وموقع هذه الذاكرة لا يتغير أبدا طوال مدة إستدعاء الدالة؛ ونظرا لهذا فإن مترجمي اللغة (Compilers) يستطيعون القيام بتحسين على الشيفرة البرمجية (code) . إذا حتى الوصول إلى البيانات في المكدس (stack) يكون سريع جدا. وترتب البيانات في المكدس (stack) على شكل قائمة خطية من العناصر.
    
    * **ذاكرة الكومة (heap memory)** - وهي للبيانات التي تم إنشاؤها خلال تشغيل التطبيق. يمكن إضافة (add) البيانات في هذه المنطقة، أو نقلها (moved)، أو إزالتها (removed)، أو تغيير حجمها (resized)، وما إلى ذلك. ونظرًا لطبيعتها الديناميكية، فإن الوصول اليها بشكل عام بطيء عند الاستخدام، ولكنها تسمح باستخدامات أكثر إبداعًا للذاكرة. عند إضافة البيانات إلى هذه المنطقة، فإننا نسميها **تخصيصا (allocation)**. وعندما تتم إزالة البيانات من هذا القسم، فإننا نسميها **إلغاء تخصيص (deallocation)**. وترتب البيانات في الكومة (heap) على شكل بنية شجرية.
    
- title: إنشاء البيانات في الذاكرة
  content_markdown: >
    عندما نقوم بـ **تمثيل (instantiate)** لـ **هيكل (struct)** في شيفرتنا البرمجية فإن البرنامج ينشئ بيانات الحقول المرتبطة به جنبا إلى جنب في الذاكرة.


    نقوم بإنشاء مثيل عن طريق تحديد جميع قيم الحقول داخل الهيكل، مثال `StructName { ... }`.
 

    يمكن الوصول الى حقول الهيكل (Struct fields) عن طريق العامل نقطة `.`.


    تفاصيل الذاكرة لمثالنا:
    
    * النص الموجود داخل علامتي الاقتباس هو بيانات للقراءة فقط (على سبيل المثال "Ferris")، وبالتالي يتم وضعه في *منطقة ذاكرة البيانات (data memory region)*
    
    * استدعاء الدالة `String::from` ينشئ هيكل (struct) اسمه `String` ويوضع جنبا إلى جنب مع حقول الهيكل SeaCreature في *المكدس (stack)*. تمثل السلسلة النصية (String) نصًا يمكن تغييره وإليك ما يحدث:
        1. إنشاء ذاكرة في *الكومة (heap)* لذلك النص بحيث يمكن تعديله
        2. تخزين مرجع موقع هذه الذاكرة الموجودة في *الكومة (heap)* وتخزينه في الهيكل `String` (المزيد حول هذا في الدروس القادمة)
        3. وأخيرًا، لدى صديقينا *Ferris* و *Sarah* هياكل بيانات ذات مواقع دائمًا ثابتة في برنامجنا، لذلك يتم وضعها في *المكدس (stack)*.
   
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature%27s%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22crab%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22octopus%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22brain%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20%7B%7D%20legs%2C%20and%20a%20%7B%7D%20weapon%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20and%20%7B%7D%20legs.%20They%20have%20no%20weapon..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: الهياكل المشابهة للصف (Tuple-like Structs)
  content_markdown: |
    من أجل الإختصار، يمكنك إنشاء هيكل (Struct) يتم استخدامه مثل الصف (Tuple).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20This%20is%20still%20a%20struct%20on%20a%20stack%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: الهياكل المشابهة للوحدة (Unit-like Structs)
  content_markdown: >
    ليس بالضرورة أن تحتوي الهياكل (Structs) على حقول.
  
  
    كما ذكرنا في الفصل الأول، فإن *الوحدة (unit)* هي كلمة أخرى تشير إلى صف (tuple) فارغ `()`. ولهذا السبب يُطلق على هذا النوع من الهياكل اسم *مشابه للوحدة (Unit-like)*.
  
  
    وهذا النوع من الهياكل نادرا ما يستخدم.

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D%0A
- title: المعدودات (Enumerations)
  content_markdown: >
    المعدودات تسمح لك بإنشاء نوع جديد يمكن أن يحمل العديد من العناصر الموسومة وذلك باستخدام الكلمة المفتاحية مَعْدُودَة (`enum`).


    تساعد مُطابقة (`match`) على ضمان تداول كلي لكل القيم المحتملة للمَعْدُودَة (enum)، مما يجعلها أداة قوية لضمان جودة الشيفرة البرمجية. 

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%20is%20a%20crab%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%20is%20a%20octopus%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%20is%20a%20fish%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%20is%20a%20clam%22%2Cferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: المعدودات ببيانات (Enumerations With Data)
  content_markdown: >
    يمكن لعناصر المَعْدُودَة (`enum`) أن تملك نوع بيانات واحد أو أكثر مما يسمح لها بالتصرف مثل *union* في لغة C.


    عندما تكون المَعْدُودَة (`enum`) نمط مطابقة باستخدام مُطابقة (`match`)، فإنه يمكنك ربط اسم متغير لكل قيمة بيانات في المَعْدُودَة.


     تفاصيل الذاكرة للمَعْدُودَة (`enum`):
     
    * حجم الذاكرة لقيمة بيانات المَعْدُودَة (enum) يكون مساوي لأكبر عنصر فيها. هذا مما يسمح لكافة القيم المحتملة أن تتناسب مع نفس المساحة من الذاكرة.
    
    * بالإضافة إلى أنواع بيانات العناصر (إن وجدت)، يحتوي كل عنصر أيضًا على قيمة رقمية تمثل أي وسم هو.


    تفاصيل أخرى:
    
    * المَعْدُودَة (`enum`) في رست (Rust) تعرف أيضا *مضمنة موسومة (tagged union)*
    
    * الجمع بين الأنواع لإنشاء نوع جديد هو ما يقصده الناس عندما يقولون أن رست (Rust) يحتوي على *أنواع جبرية (algebraic types)*.
    
        
    المزيد من الموارد حول تفاصيل الذاكرة للمَعْدُودَة (enum):
      
      
    * [موقع ويب: The Rust Performance Book - Measuring Type Sizes
    types](https://nnethercote.github.io/perf-book/type-sizes.html#measuring-type-sizes)
   
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature's%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22big%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22small%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20is%20a%20crab%20with%20%7B%7D%20%7B%7D%20claws%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20a%20crab%20with%20some%20other%20weapon%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20some%20other%20animal%22)%2C%0A%20%20%20%20%7D%0A%7D
- title: الفصل 3 - الخلاصة
  content_markdown: >
    كم هو مثير! لدينا الآن الأدوات الأساسية لتمثيل أفكارنا على شكل شيفرة برمجية (code). نأمل الآن أن نرى لمحة عن كيف يقوم رست (Rust) بعمل العمليات الأساسية بانسجام وإيجاز مع أنواعها. وسنتحدث بعد ذلك عن المفهوم الذي يمنح أنواع البيانات لدينا مرونة أكبر في التمثيل: *التعميم (generics)*.
