- title: الفصل 4 - الأنواع المعممة (Generic types)
  content_markdown: >
    الأنواع المعممة (Generic types) مهمة بشكل كبير في رست (Rust). يتم استخدامها في تمثيل القيم الخالية (nullable values) (كالمتغيرات التي لا تمك قيمة بعد)، ومعالجة الأخطاء، والمجموعات، والمزيد! سنتعرف في هذا الفصل على الأنواع المعممة الأساسية التي من المحتمل أنك ستستخدمها طوال الوقت.

- title: ما هي الأنواع المعممة (Generic types)؟
  content_markdown: >
    تسمح لنا الأنواع المعممة (Generic types) بتعريف جزئي لهيكل (`struct`) أو معدودة (`enum`)، وذلك لتمكين مترجم اللغة (compiler) من تعريف إصدارات كاملة أثناء وقت الترجمة (compile-time) بناءا على استخدام شيفرتنا البرمجية (code).
    
    
    
    يمكن لرست (Rust) استنتاج النوع النهائي بعد النظر لتمثيلنا (instantiation) لذلك النوع، ولكن إذا أردت أن تكون واضح فيمكنك دائما إستخدام العامل `<T>::`، والذي يعرف أيضا باسم عنفة السمكة `turbofish` (إنه صديق جيد بالنسبة لي!).
    
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%2F%2F%20A%20partially%20defined%20struct%20type%0Astruct%20BagOfHolding%3CT%3E%20%7B%0A%20%20%20%20item%3A%20T%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Note%3A%20by%20using%20generic%20types%20here%2C%20we%20create%20compile-time%20created%20types.%20%0A%20%20%20%20%2F%2F%20Turbofish%20lets%20us%20be%20explicit.%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%2042%20%7D%3B%0A%20%20%20%20let%20bool_bag%20%3D%20BagOfHolding%3A%3A%3Cbool%3E%20%7B%20item%3A%20true%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Rust%20can%20infer%20types%20for%20generics%20too!%0A%20%20%20%20let%20float_bag%20%3D%20BagOfHolding%20%7B%20item%3A%203.14%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Note%3A%20never%20put%20a%20bag%20of%20holding%20in%20a%20bag%20of%20holding%20in%20real%20life%0A%20%20%20%20let%20bag_in_bag%20%3D%20BagOfHolding%20%7B%0A%20%20%20%20%20%20%20%20item%3A%20BagOfHolding%20%7B%20item%3A%20%22boom!%22%20%7D%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20i32_bag.item%2C%20bool_bag.item%2C%20float_bag.item%2C%20bag_in_bag.item.item%0A%20%20%20%20)%3B%0A%7D%0A
- title: تمثيل لا شيء
  content_markdown: >
    في لغات أخرى، يتم استخدام الكلمة المفتاحية خالي (`null`) لتمثيل غياب القيمة. وهذا يسكل صعوبة في لغات البرمجة لأنه هناك احتمالية فشل برنامجنا عند التفاعل مع متغير (variable)/حقل (field).
  
  
    رست (Rust) ليس له الكلمة المفتاحية خالي (`null`) لكنه لا يهمل أهمية تمثيل اللاشيء! بحيث فكرو في تمثيل بسيط باستخدام أداة نعرفها بالفعل.
  
  
    لا شيء (`None`) هي نمط بديل شائع جدا في رست (Rust) لتمثيل قيمة أو عدة قيم خالية بسبب افتقاره إلى القيمة خالي (`null`). وتساعد الأنواع المعممة (Generic types) في حل هذا التحدي.
  
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=enum%20Item%20%7B%0A%20%20%20%20Inventory(String)%2C%0A%20%20%20%20%2F%2F%20None%20represents%20the%20absence%20of%20an%20item%0A%20%20%20%20None%2C%0A%7D%0A%0Astruct%20BagOfHolding%20%7B%0A%20%20%20%20item%3A%20Item%2C%0A%7D%0A
- title: الخيار (Option)
  content_markdown: >
    رست (Rust) يحتوي على معدودة عميمة (generic enum) تدعى بخيار `Option` تسمح لنا بتمثيل قيم خالية (nullable values) بدون استعمال الكلمة المفتاحية خالي (`null`).


    ```

    enum Option<T> {
        None,
        Some(T),
    }

    ```


    هذه المعدودة (enum) شائعة جدا، ويمكن إنشاء مثلاء (instances) المعدودة في أي مكان مع خيارات المعدودة (enum variants) بعض (`Some`) و لاشيء (`None`)

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%2F%2F%20A%20partially%20defined%20struct%20type%0Astruct%20BagOfHolding%3CT%3E%20%7B%0A%20%20%20%20%2F%2F%20Our%20parameter%20type%20T%20can%20be%20handed%20to%20others%0A%20%20%20%20item%3A%20Option%3CT%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Note%3A%20A%20bag%20for%20i32%2C%20holding%20nothing!%20We%20have%20to%20specify%20the%20type%0A%20%20%20%20%2F%2F%20because%20otherwise%20Rust%20would%20not%20know%20what%20type%20of%20bag%20it%20is.%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%20None%20%7D%3B%0A%0A%20%20%20%20if%20i32_bag.item.is_none()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20nothing%20in%20the%20bag!%22)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20something%20in%20the%20bag!%22)%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%20Some(42)%20%7D%3B%0A%0A%20%20%20%20if%20i32_bag.item.is_some()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20something%20in%20the%20bag!%22)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20nothing%20in%20the%20bag!%22)%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20match%20lets%20us%20deconstruct%20Option%20elegantly%20and%20ensure%20we%20handle%20all%20cases!%0A%20%20%20%20match%20i32_bag.item%20%7B%0A%20%20%20%20%20%20%20%20Some(v)%20%3D%3E%20println!(%22found%20%7B%7D%20in%20bag!%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20None%20%3D%3E%20println!(%22found%20nothing%22)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: النتيجة (Result)
  content_markdown: >
    رست (Rust) يحتوي على معدودة عميمة (generic enum) تدعى بنتيجة `Result` يسمح لنا بإرجاع قيمة من المحتمل أن تكون فاشلة. إنها الطريقة الاصطلاحية التي تتعامل بها اللغة مع الأخطاء.
    


    ```

    enum Result<T, E> {
        Ok(T),
        Err(E),
    }

    ```


    لاحظ أن النوع المعمم (generic type) الخاص بنا يحتوي على *أنواع على شكل معلمات (parameterized types)* متعددة مفصولة بفاصلة.


    هذه المعدودة (enum) شائعة جدا، ويمكن إنشاء مثلاء (instances) المعدودة في أي مكان مع خيارات المعدودة (enum variants) موافق (`Ok`) و خطأ (`Err`).

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3Ai32)%20-%3E%20Result%3Cf32%2CString%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%20%20%20%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20result%20%3D%20do_something_that_might_fail(12)%3B%0A%0A%20%20%20%20%2F%2F%20match%20lets%20us%20deconstruct%20Result%20elegantly%20and%20ensure%20we%20handle%20all%20cases!%0A%20%20%20%20match%20result%20%7B%0A%20%20%20%20%20%20%20%20Ok(v)%20%3D%3E%20println!(%22found%20%7B%7D%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20Err(e)%20%3D%3E%20println!(%22Error%3A%20%7B%7D%22%2Ce)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: الدالة الرئيسية القابلة للخطأ (Fallible Main)
  content_markdown: |
    الدالة الرئيسية `main` لديها امكانية إرجاع نتيجة (`Result`)!
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Main%20returns%20no%20value%2C%20but%20could%20return%20an%20error!%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20let%20result%20%3D%20do_something_that_might_fail(12)%3B%0A%0A%20%20%20%20match%20result%20%7B%0A%20%20%20%20%20%20%20%20Ok(v)%20%3D%3E%20println!(%22found%20%7B%7D%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20Err(_e)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20handle%20this%20error%20gracefully%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20return%20a%20new%20error%20from%20main%20that%20said%20what%20happened!%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(String%3A%3Afrom(%22something%20went%20wrong%20in%20main!%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Notice%20we%20use%20a%20unit%20value%20inside%20a%20Result%20Ok%0A%20%20%20%20%2F%2F%20to%20represent%20everything%20is%20fine%0A%20%20%20%20Ok(())%0A%7D%0A
- title: التعال مع الأخطاء بطريقة سلسة (Graceful Error Handling)
  content_markdown: >
    نتيجة (`Result`) شائعة جدا لدرجة أن رست (Rust) لديها عامل قوي وهو `?` للعمل معها. هذين صياغتين متساويان:


    ```

    do_something_that_might_fail()?

    ```


    ```

    match do_something_that_might_fail() {
        Ok(v) => v,
        Err(e) => return Err(e),
    }

    ```
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20%2F%2F%20Look%20at%20how%20much%20code%20we%20saved!%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(42)%3F%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20Ok(())%0A%7D%0A
- title: التعامل مع الخيار/النتيجة بطرية ملتوية (Ugly Option/Result Handling)
  content_markdown: >
    يمكن أن يكون العمل بخيار/نتيجة (`Option`/`Result`) أمرًا مملاً عندما تحاول كتابة بعض التعليمات البرمجية السريعة. كل من خيار (`Option`) و نتيجة (`Result`) يملكان تابعة تدعى فك (`unwrap`). يمكن أن يكون ذلك مفيدًا للحصول على قيمة بطريقة سريعة وملتوية. فك ( `unwrap` ) سوف:
    
    1. تحصل على القيمة داخل الخيار/النتيجة (Option/Result).
    
    2. وإذا كانت المعدودة (enum) من نوع لاشيء/خطأ (None/Err) سوف تنتج ترويع (`panic!`).
    
    
    هاتان القطعتان من التعليمات البرمجية متكافئتان:
 
 
    ```

    my_option.unwrap()

    ```


    ```

    match my_option {
        Some(v) => v,
        None => panic!("some error message generated by Rust!"),
    }

    ```


    بصورة مماثلة:


    ```

    my_result.unwrap()

    ```


    ```

    match my_result {
        Ok(v) => v,
        Err(e) => panic!("some error message generated by Rust!"),
    }

    ```


    كن رستاسيًا (rustacean) جيدًا واستخدم مُطابقة (`match`) بشكل صحيح متى تستطيع!
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20%2F%2F%20concise%20but%20assumptive%20and%20gets%20ugly%20fast%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(42).unwrap()%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20this%20will%20panic!%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(1).unwrap()%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20%0A%20%20%20%20Ok(())%0A%7D%0A
- title: المتجهات (Vectors)
  content_markdown: >
    من الانواع المعممة (generic types) المفيدة جدا في رست (Rust) هي أنواع التجميعات (collection types). المتجهة (vector) عبارة عن قائمة متغيرة الحجم من العناصر وهي تمثل عن طريق الهيكل (struct) ذو المعرف `Vec`.


    الماكرو (macro) `vec!` يسمح لنا بسهولة إنشاء متجهة (vector) عوض بناء واحدة يدويا.


    الهيكل `Vec` لديه تابعة تسمى `()iter` والتي تنشئ مكرر (iterator) من المتجهة (vector)، وهذا يسمح لنا وضح المتجهة في حلقة من أجل (`for`).


    تفاصيل الذاكرة:

    * `Vec` هي هيكل (struct) ، ولكنه يحتوي داخليًا على مرجع (reference) لقائمة ثابتة لعناصره والموجودة في الكومة (heap)
    
    * المتجهة (vector) تبدأ بسعة إفتراضية؛ عند إضافة المزيد من العناصر أكثر من سعتها، فإنها تعيد تخصيص (reallocates) بياناتها على الكومة (heap) للحصول على قائمة ثابتة جديدة ذات سعة أكبر.
    
    
    تنويه: لفظة ماكرو (macro) تستخدم للتعبير عن دمج عدة أوامر نمطية وكثيرة التكرار في أمر واحد بسيط يمكن استخدامه بسهولة،

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20We%20can%20be%20explicit%20with%20type%0A%20%20%20%20let%20mut%20i32_vec%20%3D%20Vec%3A%3A%3Ci32%3E%3A%3Anew()%3B%20%2F%2F%20turbofish%20%3C3%0A%20%20%20%20i32_vec.push(1)%3B%0A%20%20%20%20i32_vec.push(2)%3B%0A%20%20%20%20i32_vec.push(3)%3B%0A%0A%20%20%20%20%2F%2F%20But%20look%20how%20clever%20Rust%20is%20about%20determining%20the%20type%20automatically%0A%20%20%20%20let%20mut%20float_vec%20%3D%20Vec%3A%3Anew()%3B%0A%20%20%20%20float_vec.push(1.3)%3B%0A%20%20%20%20float_vec.push(2.3)%3B%0A%20%20%20%20float_vec.push(3.4)%3B%0A%0A%20%20%20%20%2F%2F%20That's%20a%20beautiful%20macro!%0A%20%20%20%20let%20string_vec%20%3D%20vec!%5BString%3A%3Afrom(%22Hello%22)%2C%20String%3A%3Afrom(%22World%22)%5D%3B%0A%0A%20%20%20%20for%20word%20in%20string_vec.iter()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20word)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: الفصل 4 - الخلاصة
  content_markdown: >
    لقد تعلمنا في أحد الفصول مقدار القوة التي توفرها لنا الأنواع المعممة (generic types)! لا تقلق إذا كنت لا تعرف تمامًا كيفية استخدام كل شيء، فمن الجيد الآن أن تكون على دراية بالأفكار الرئيسية التي ستراها مرارًا وتكرارًا في الشيفرات البرمجية. أصبحت دوال طويلة نوعا ما! في الفصل التالي سنتحدث عن مفهوم مهم في رست (Rust): ملكية البيانات (data ownership).
