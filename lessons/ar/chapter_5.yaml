- title: الفصل 5 - ملكية وإستعارة البيانات (Ownership & Borrowing Data)
  content_markdown: >
    لدى رست (Rust) نموذج فريد لإدارة الذاكرة مقارنة بلغات البرمجة الأخرى.سوف نلقي نظرة على سلوكيات (behaviors) و عمليات التحقق (validations) الخاصة بمترجم اللغة (compiler) واحدًا تلو الآخر، لذلك لن يكون الأمر مربكًا. من المهم أن تتذكر أن القواعد التي نعرضها في نهاية المطاف ليست موجودة لجعل الأمور صعبة، ولكن لمساعدتك في جعل التعليمات البرمجية الخاصة بك أقل عرضة للخطأ!
- title: الملكية (Ownership)
  content_markdown: >
    يؤدي إنشاء مثيل (instance) لنوع و**ربطه (binding)** باسم متغير إلى إنشاء مورد ذاكرة (memory resource) بحيث سيقوم رست (Rust) بالتحقق من **عمره (lifetime)** الكلي. المتغير  المرتبط (bound variable) يسمى **مالك (owner)** المورد.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20We%20instantiate%20structs%20and%20bind%20to%20variables%0A%20%20%20%20%2F%2F%20to%20create%20memory%20resources%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20is%20the%20owner%0A%7D%0A
- title: إدرارة الموارد على أساس النطاق (Scope-Based Resource Management)
  content_markdown: |
    يستخدم رست (Rust) نهاية النطاق (scope) كمكان لتفكيك (deconstruct) المورد وإلغاء تخصيصه (deallocate).
    
    يُطلق على المصطلح الخاص بهذا التفكيك (deconstruction) وإلغاء التخصيص (deallocation) اسم **اسقاط (drop)**

    
    تفاصيل الذاكرة:
    * رست (Rust) لا يملك جمع القمامة (garbage collection).
    * يُطلق على هذا أيضًا اسم "اكتساب الموارد تهيئة (Resource Acquisition Is Initialization)" (RAII) في لغة ++C.
 
  code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2013%20%7D%3B%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20%2F%2F%20foo_b%20is%20dropped%20here%20%0A%20%20%20%20%2F%2F%20foo_a%20is%20dropped%20here%0A%7D%0A
- title: الاسقاط يكون هرمي (Dropping is Hierarchical)
  content_markdown: >
    عندما يسقط هيكل (struct)، فإنه يتم إسقاط الهيكل (struct) نفسه أولاً، ثم يتم إسقاط أبنائه بشكل فردي، وهكذا.


    تفاصيل الذاكرة:
    
    * عن طريق التحرير التلقائي للذاكرة فإن رست (Rust) يساعد على ضمن تقليل تسربات الذاكرة (memory leaks).
    
    * لا يمكن إسقاط (drop) موارد الذاكرة (Memory resources) إلا مرة واحدة.

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Bar%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Astruct%20Foo%20%7B%0A%20%20%20%20bar%3A%20Bar%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20bar%3A%20Bar%20%7B%20x%3A%2042%20%7D%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.bar.x)%3B%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20first%0A%20%20%20%20%2F%2F%20then%20foo.bar%20is%20dropped%0A%7D%0A
- title: نقل الملكية (Moving Ownership)
  content_markdown: >
    عندما يتم تمرير مالك (owner) كوسيطة (argument) إلى دالة (function)، يتم نقل الملكية (ownership) إلى معلمة (parameter) الدالة.
    
    
    بعد **النقل (move)** لن يكون من الممكن استخدام المتغير الموجود في الدالة الأصلية.


    تفاصيل الذاكرة:
    
    * عند **النقل (move)** فإن ذاكرة المكدس (stack memory) الخاصة بقيمة المالكين (owners) تنسخ الى ذاكرة مكدس معلمة (parameter stack memory)  الخاصة باستدعاء الدالة.

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20is%20dropped%20here%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20is%20moved%20to%20do_something%0A%20%20%20%20do_something(foo)%3B%0A%20%20%20%20%2F%2F%20foo%20can%20no%20longer%20be%20used%0A%7D%0A
- title: إرجاع الملكية (Returning Ownership)
  content_markdown: |
    يمكن أيضًا إرجاع الملكية من إحدى الدوال. 
    
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something()%20-%3E%20Foo%20%7B%0A%20%20%20%20Foo%20%7B%20x%3A%2042%20%7D%0A%20%20%20%20%2F%2F%20ownership%20is%20moved%20out%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20do_something()%3B%0A%20%20%20%20%2F%2F%20foo%20becomes%20the%20owner%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20because%20of%20end%20of%20function%20scope%0A%7D%0A
- title: إستعارة الملكية عن طريق المراجع (Borrowing Ownership with References)
  content_markdown: |
    تتيح لنا المراجع (References) استعارة الوصول إلى أحد الموارد باستخدام العامل `&`.
    
    يتم أيضًا إسقاط المراجع (References) مثل الموارد الأخرى.

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26foo%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20is%20dropped%20here%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20here%0A%7D%0A
- title: إستعارة ملكية قابلة للتغيير عن طريق المراجع (Borrowing Mutable Ownership with References)
  content_markdown: >
    يمكننا أيضًا استعارة الوصول إلى أحد الموارد وتكون قابلة لإحداث تغيير باستخدام العامل `&mut`.
    
    
    لا يمكن نقل مالك (owner) المورد أو تعديله أثناء استعارته بشكل قابل للتغيير (mutably borrowed).


    تفاصيل الذاكرة:
    
    * في رست (Rust) طريقتين لتغيير (mutate) قيمة مملوكة (owned value) لأنه يقدم إحتمالية حدوث سباق بيانات (data race). 

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20is%20dropped%20here%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%0A%20%20%20%20%2F%2F%20FAILURE%3A%20do_something(foo)%20would%20fail%20because%0A%20%20%20%20%2F%2F%20foo%20cannot%20be%20moved%20while%20mutably%20borrowed%0A%0A%20%20%20%20%2F%2F%20FAILURE%3A%20foo.x%20%3D%2013%3B%20would%20fail%20here%20because%0A%20%20%20%20%2F%2F%20foo%20is%20not%20modifiable%20while%20mutably%20borrowed%0A%0A%20%20%20%20f.x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20f%20is%20dropped%20here%20because%20it's%20no%20longer%20used%20after%20this%20point%0A%20%20%20%20%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.x)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20this%20works%20now%20because%20all%20mutable%20references%20were%20dropped%0A%20%20%20%20foo.x%20%3D%207%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20move%20foo's%20ownership%20to%20a%20function%0A%20%20%20%20do_something(foo)%3B%0A%7D%0A
- title: إلغاء المرجعية (Dereferencing)
  content_markdown: >
    عندما تستخدم المراجع المنشئ بـ `&mut`، فإنه يمكنك تعيين قيمة المالك باستخدام العامل `*`.
    
    
    يمكنك أيضًا الحصول على نسخة  من القيمة المملوكة (owned value) باستخدام العامل `*` (وهذا إذا كان من الممكن نسخ القيمة - سنناقش الأنواع القابلة للنسخ في الفصول اللاحقة).

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%2042%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%20%20%20%20let%20bar%20%3D%20*f%3B%20%2F%2F%20get%20a%20copy%20of%20the%20owner's%20value%0A%20%20%20%20*f%20%3D%2013%3B%20%20%20%20%20%20%2F%2F%20set%20the%20reference's%20owner's%20value%0A%20%20%20%20println!(%22%7B%7D%22%2C%20bar)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo)%3B%0A%7D%0A
- title: تمرير البيانات المستعارة (Passing Around Borrowed Data)
  content_markdown: >
    من الأفضل تلخيص قواعد رست (Rust) فيما يتعلق بالمراجع في مايلي:
  
  
    * رست (Rust) يسمح فقط بوجود مرجع واحد قابل للتغيير (mutable reference) **أو** عدة مراجع غير قابلة للتغيير (non-mutable references) **ولكن ليس كلاهما**.
  
    * يجب ألا يعيش المرجع (reference) **لفترة أطول** من مالكه (owner). 
  
  
    لا يمثل هذا مشكلة عند تمرير المراجع إلى الدوال.
  
  
    تفاصيل الذاكرة:
  
    * القاعدة الأولى للمراجع تمنع سباقات البيانات (data races). ما هو سباق البيانات؟ يحدث سباق البيانات عندما تكون البيانات لديها إحتمالية لوجودها خارج النطاق الغير متزامن (sync) ونتيجة وجود أيضا كاتب آخر على هذه البيانات في نفس الوقت. يحدث هذا غالبًا في البرمجة متعددة الخيوط (multi-threaded programming).
    
    * القاعدة الثانية للمراجع تمنع إساءة استخدام المراجع التي تشير إلى بيانات غير موجودة (تسمى المؤشرات المتدلية - dangling pointers - في لغة C).

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20%26mut%20Foo)%20%7B%0A%20%20%20%20f.x%20%2B%3D%201%3B%0A%20%20%20%20%2F%2F%20mutable%20reference%20f%20is%20dropped%20here%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20do_something(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20because%20all%20mutable%20references%20are%20dropped%20within%0A%20%20%20%20%2F%2F%20the%20function%20do_something,%20we%20can%20create%20another.%0A%20%20%20%20do_something(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20here%0A%7D%0A
- title: مراجع المراجع (References Of References)
  content_markdown: |
    يمكنك تطبيق المراجع على أجزاء من مراجع أخرى.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(a%3A%20%26Foo)%20-%3E%20%26i32%20%7B%0A%20%20%20%20return%20%26a.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20is%20dropped%20here%20allow%20us%20to%20create%20a%20non-mutable%20reference%0A%20%20%20%20let%20y%20%3D%20do_something(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20is%20dropped%20here%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20here%0A%7D%0A
- title: العمر الصريح (Explicit Lifetimes)
  content_markdown: >
    على الرغم من أن رست (Rust) لا يظهر العمر دائمًا في التعليمات البرمجية، إلا أن المترجم (compiler) يفهم عمر (lifetime) كل متغير ويحاول التحقق من أن المرجع (reference) لن يكون موجود بعد مالكه (owner).
    
    
    يمكن أن تكون الدوالة صريحة العمر من خلال تعليم معلمات توقيع الدالة (function signature) برموز تساعد في تحديد أين من المعلمات (parameters) وقيم الإرجاع (return values) التي تشترك في نفس العمر (lifetime).
    
    
    محددات العمر (Lifetime specifiers) دائما تبدأ بالرمز `'` (مثال: `a' ` أو `b' ` أو `c' ` ... )

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20the%20parameter%20foo%20and%20return%20value%20share%20the%20same%20lifetime%0Afn%20do_something%3C'a%3E(foo%3A%20%26'a%20Foo)%20-%3E%20%26'a%20i32%20%7B%0A%20%20%20%20return%20%26foo.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20is%20dropped%20here%2C%20allowing%20us%20to%20create%20a%20non-mutable%20reference%0A%20%20%20%20let%20y%20%3D%20do_something(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20is%20dropped%20here%0A%20%20%20%20%2F%2F%20foo%20is%20dropped%20here%0A%7D%0A
- title: أعمار متعددة (Multiple Lifetimes)
  content_markdown: >
    تتيح لنا محددات العمر (Lifetime specifiers) أن نكون واضحين في بعض السيناريوهات التي لا يستطيع مترجم اللغة (compiler) حلها بنفسه وذلك عن طريق التمييز بين جميع أعمار (lifetimes) مكونات توقيع الدالة (function signature component).

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20foo_b%20and%20the%20return%20value%20share%20the%20same%20lifetime%0A%2F%2F%20foo_a%20has%20an%20unrelated%20lifetime%0Afn%20do_something%3C'a%2C%20'b%3E(foo_a%3A%20%26'a%20Foo%2C%20foo_b%3A%20%26'b%20Foo)%20-%3E%20%26'b%20i32%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20return%20%26foo_b.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2012%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20do_something(%26foo_a%2C%20%26foo_b)%3B%0A%20%20%20%20%2F%2F%20foo_a%20is%20dropped%20here%20because%20only%20foo_b's%20lifetime%20exist%20beyond%20here%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%2F%2F%20x%20is%20dropped%20here%0A%20%20%20%20%2F%2F%20foo_b%20is%20dropped%20here%0A%7D%0A
- title: الأعمارة الساكنة (Static Lifetimes)
  content_markdown: >
    المتغير **الساكن (static)** هو مورد ذاكرة (memory resource) تم إنشاؤه في وقت الترجمة (compile-time)، وهو موجود من بدء البرنامج حتى نهايته. ويجب حديد أنواعه بشكل صريح.


    **العمر الساكن (static)** هو مورد ذاكرة (memory resource) يبقى حتى نهاية البرنامج. ولاحظ أنه بموجب هذا التعريف فإنه يمكن إنشاء بعض الموارد ساكنة العمر (static lifetime) في وقت التشغيل (runtime).
    

    الموارد ذات الأعمار الساكنة لها محدد عمر خاص وهو `'static`.


    الموارد ذات الأعمار الساكنة `'static` لا **تسقط (drop)** أبدا.


    إذا كانت الموارد ذات الأعمار الساكنة تحتوي على مراجع (references)، فيجب أن تكون جميع المراجع ساكنة `'static` (ي شيء غير ذلك لن يقى طويلا بما فيه الكفاية).


    تفاصيل الذاكرة:

    * يعد تعديل المتغيرات الساكنة (static variables) أمرًا خطيرًا بطبيعته لأنه يمكن الوصول من الجميع (globally accessable) ويقرأها أي شخص وهذا يمكن أن يحدث سباق بيانات (data race). سنتحدث عن تحديات البيانات المتاحة للجميع (global data) لاحقًا.

     * يسمح رست (Rust) باستخدام الكتل الغير آمنة عن طريق `unsafe { ... }` لتنفيذ بعض العمليات التي لا يستطيع المترجم (compiler) تقديم ضمانات للذاكرة بشأنها.لا ينبغي لـ [<span style="color:red; font-weight: bold;">R̸͉̟͈͔̄͛̾̇͜U̶͓͖͋̅Ṡ̴͉͇̃̉̀T̵̻̻͔̟͉́͆Ơ̷̥̟̳̓͝N̶̨̼̹̲͛Ö̵̝͉̖̏̾̔M̶̡̠̺̠̐͜Î̷̛͓̣̃̐̏C̸̥̤̭̏͛̎͜O̶̧͚͖͔̊͗̇͠N̸͇̰̏̏̽̃</span>](https://doc.rust-lang.org/nomicon/) التحدث عن هذا الموضوع بشكل عرضي.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=static%20PI%3A%20f64%20%3D%203.1415%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20static%20variables%20can%20also%20be%20scoped%20to%20a%20function%0A%20%20%20%20static%20mut%20SECRET%3A%20%26'static%20str%20%3D%20%22swordfish%22%3B%0A%0A%20%20%20%20%2F%2F%20string%20literals%20have%20a%20'static%20lifetime%0A%20%20%20%20let%20msg%3A%20%26'static%20str%20%3D%20%22Hello%20World!%22%3B%0A%20%20%20%20let%20p%3A%20%26'static%20f64%20%3D%20%26PI%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20msg%2C%20p)%3B%0A%0A%20%20%20%20%2F%2F%20You%20can%20break%20some%20rules%2C%20but%20you%20must%20be%20explicit%0A%20%20%20%20unsafe%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20set%20SECRET%20to%20a%20string%20literal%20because%20it%20is%20also%20%60static%0A%20%20%20%20%20%20%20%20SECRET%20%3D%20%22abracadabra%22%3B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20SECRET)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: الأعمار في أنواع البيانات (Lifetimes In Data Types)
  content_markdown: >
    كما هو الحال مع الدوال، يمكن لأنواع البيانات أن تعلم باستخدام محددات عمر أعضائها (lifetime specifiers).


    يتحقق رست (Rust) من أن محتوى هيكل البيانات (data structure) الذي به مراجع (references) أنها لا تدوم أبدًا لفترة أطول من المالكين الذين تشير اليهم تلك المراجع.


     لا يمكن أن يكون لدينا هياكل (structs) بها مراجع تشير إلى اللا شيء (nothingness)!

  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%3C'a%3E%20%7B%0A%20%20%20%20i%3A%26'a%20i32%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%0A%20%20%20%20%20%20%20%20i%3A%20%26x%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cfoo.i)%3B%0A%7D%0A
- title: الفصل 5 - الخلاصة
  content_markdown: >
    واو، تهانينا على تحقيق كل هذا! أعلم أن الأمر تطلب الكثير لأخذ هذه المعلومات، لكنك في طريقك لتصبح من الرستاسيين (Rustacean). نأمل أن يكون قد اتضحت لك أهداف لغة رست (Rust) في حل العديد من التحديات الشائعة في برمجة الأنظمة التي من بينها:


    * التعديل غير المقصود للموارد
    
    * نسيان تفكيك (deconstruct) الموارد
    
    * تفكيك الموارد عن طريق الخطأ مرتين
    
    * استخدام الموارد بعد أن تم تفكيكها
    
    * سباقات البيانات (Data races) الناتجة عن الكتابة إلى مورد بينما هناك الآخرون يقرؤون  من نفس الموارد
    
    * ضمان توضيح مناطق التعليمات البرمجية للمترجم حيث لا يستطيع هو أن يقدم ضمانات
    
    
    في الفصل التالي، سنطبق بعضًا من هذه المعرفة عندما نتطرق إلى كيفية تعامل رست (Rust) مع النص.
