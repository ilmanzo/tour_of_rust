- title: الفصل 7 - البرمجة كائنية التوجه (Object Oriented Programming)
  content_markdown: >
    يعد التعبير عن الأفكار باستخدام الدوال طريقة مجربة لتمثيل السلوك والبيانات (تقوم لغة البرمجة C بذلك منذ عقود!). تاريخيًا، وجدت علوم الكمبيوتر تعبيرات أخرى مفيدة مجمعة ومجردة للبيانات. وكإحدى هذه الأساليب التي قد تكون على دراية بها وهي البرمجة كائنية التوجه (إختصار تكتب OOP). في هذا الفصل سوف نستكشف لغة برمجة رست (Rust)خارج نطاق الدوال.

- title: ماهي البرمجة كائنية التوجه (OOP)؟
  content_markdown: >
    تشير البرمجة كائنية التوجه (Object oriented programming) تقريبًا إلى لغة البرمجة التي تحتوي على عدد من الميزات البارزة منها:


    * التغليف (Encapsulation) - ربط البيانات والدوال في وحدة تصورية من نوع واحد يسمى *الكائن (object)*.
   
    * التجريد (Abstraction) - إخفاء أعضاء من بيانات و دوال للتعتيم (obfuscate) على تفاصيل تنفيذ (implementation) الكائن.
   
    * تعدد الأشكال (Polymorphism) - القدرة على التفاعل مع كائنات (objects) من أنواع مختلفة من خلال واجهة واحدة.
   
    * الوراثة (Inheritance) - القدرة على وراثة البيانات والسلوك (behavior) من كائنات أخرى.
- title: رست (Rust) ليست OOP
  content_markdown: >
    يفتقر رست (Rust) إلى وراثة البيانات والسلوك في نفس الوقت.
    
    
    * لا يمكن للهياكل أن ترث الحقول من الهيكل الأب.
    
    * لا يمكن للهياكل أن ترث دوال من الهيكل الأب.


    ومع ذلك، تنفذ رست (Rust) العديد من ميزات لغة البرمجة كائنية التوجه، لذلك قد لا يهمك نقصها.
- title: التغليف بالتوابع (Encapsulation With Methods)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    يدعم رست (Rust) مفهوم *الكائن (object)* وهو عبارة عن هيكل (struct) مرتبط ببعض الدوال (المعروفة أيضًا باسم *التوابع (methods)*).


    يجب أن تكون المعلمة (parameter) الأولى لأي تابعة (method) مرجعًا (reference) للمثيل (instance) المرتبط باستدعاء التابعة (على سبيل المثال، <span dir="ltr">`instanceOfObj.foo()`</span>). استخدامات رست:
    
    
    * <span dir="ltr">`&self`</span> - مرجع للمثيل غير قابل للتغيير.
    
    * <span dir="ltr">`&mut self`</span> - مرجع للمثيل قابل للتغيير.


    يتم تعريف التوابع (Methods) ضمن كتلة التنفيذ (implementation block) عن طريق الكلمة المفتاحية `impl`:

    ```rust

    impl MyStruct { 
        ...
        fn foo(&self) {
            ...
        }
    }

    ```
- title: التجريد بالعرض الإنتقائي (Abstraction With Selective Exposure)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    رست (Rust) يمكن أن يخفي الأعمال الداخلية للكائنات.


     بشكل افتراضي، لا يمكن الوصول إلى الحقول والتوابع إلا من خلال الوحدة (module) التي تنتمي إليها.


     تكشف الكلمة المفتاحية `pub` عن حقول وتوابع الهيكل خارج الوحدة (module).
- title: تعدد الأشكال باستخدام السمات (Polymorphism With Traits)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A
  content_markdown: >
    رست (Rust) يدعم تعدد الأشكال (Polymorphism) باستخدام السمات (Traits). تسمح لنا السمات (Traits) بربط مجموعة من التوابع (methods) بنوع هيكل (struct).


    نحدد أولاً تواقيع (signatures) توابع السمة كما يلي:


    ```

    trait MyTrait {
        fn foo(&self);
        ...
    }

    ```


    عندما ينفذ الهيكل (struct) سمة (trait) ما، فإنه ينشئ عقدًا يسمح لنا بالتفاعل بشكل غير مباشر مع الهيكل من خلال نوع سمة - trait type - (على سبيل المثال <span dir="ltr">`&dyn MyTrait`</span>) دون الحاجة إلى معرفة النوع الحقيقي.


    يتم تعريف توابع السمة (traits methods) المراد تنفيذها في الهيكل ضمن كتلة التنفيذ (implementation block):


    ```rust

    impl MyTrait for MyStruct { 
        fn foo(&self) {
            ...
        }
        ... 
    }

    ```
- title: التوابع المنفذة في السمات (Implemented Methods On Traits)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%20%20%20%20%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: >
    يمكن أن يكون للسمات (Traits) توابع منفذة (implemented methods). ويمكن تسميتها بالتوابع الإفتراضية.
    
    
    لا تتمتع هذه التوابع بإمكانية الوصول المباشر إلى الحقول الداخلية للهيكل، ولكنها قد تكون مفيدة لمشاركة السلوك بين العديد من منفذي السمات (trait implementors).
- title: وراثة السمات (Trait Inheritance)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Atrait%20LoudNoiseMaker%3A%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20LoudNoiseMaker%20for%20SeaCreature%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: |
    يمكن أن ترث السمات (Traits) توبع من سمات أخرى.
- title: الإرسال الحيوي والساكن (Dynamic vs Static Dispatch)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20static_make_noise(creature%3A%20%26SeaCreature)%20%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20dynamic_make_noise(noise_maker%3A%20%26dyn%20NoiseMaker)%20%7B%0A%20%20%20%20%2F%2F%20we%20don't%20know%20the%20real%20type%0A%20%20%20%20noise_maker.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20static_make_noise(%26creature)%3B%0A%20%20%20%20dynamic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    التوابع تنفذ بطريقتين:
    
    * الإرسال الساكن (static dispatch) - عندما يكون نوع المثيل (instance) معروفًا، تكون لدينا معرفة مباشرة بالدلة التي يجب استدعاؤها.
    
    * الإرسال الحيوي (dynamic dispatch) - عندما لا يكون نوع المثيل (instance) معروفًا، يجب علينا اكتشاف طريقة ما لاستدعاء الدالة الصحيحة.


    أنواع السمات (Trait types) أي <span dir="ltr">`&dyn MyTrait`</span> القدرة على العمل مع مثلاء الكائنات (instances of objects) بشكل غير مباشر باستخدام الإرسال الحيوي أو الديناميكي.


    عند استخدام الإرسال الحيوي (dynamic dispatch)، سيشجعك رست (Rust) على وضع `dyn` قبل نوع السمة الخاصة بك حتى يكون الناس على علم بذلك.


    تفاصيل الذاكرة:

    * الإرسال الحيوي (dynamic dispatch) أبطأ قليلاً بسبب تعقب المؤشر (pointer) من أجل العثور على استدعاء الدلية الحقيقية.

- title: كائنات السمة (Trait Objects)
  content_markdown: >
    عندما نقوم بتمرير مثيل (instance) الكائن إلى معلمة (parameter) من النوع <span dir="ltr">`&dyn MyTrait`</span>، فإننا نمرر ما يسمى بـ *كائن السمة (trait object)*.


    كائن السمة (trait object) هو ما يسمح لنا باستدعاء غير مباشر للتوابع الصحيحة للمثيل (instance). كائن السمة عبارة عن هيكل يحمل مؤشر (pointer) المثيل الخاص بنا مع قائمة مؤشرات الدوال (function pointers) لتوابعه.


    تفاصيل الذاكرة:
    
    * تُعرف قائمة الدوال هذه في لغة ++C باسم *vtable*.
- title: التعامل مع البيانات غير المحجمة (Handling Unsized Data)
  content_markdown: >
    تقدم السمات (Traits) تحديًا مثيرًا للاهتمام عندما نريد تخزينها ضمن هيكل آخر. بحيث تعمل السمات على تشويش الهيكل الأصلي وبالتالي تشوه الحجم الأصلي أيضًا. تتم معالجة القيم غير المحجمة (Unsized values) المخزنة في الهياكل (structs) بطريقتين في رست (Rust):
    
    * التعميم `generics` - يؤدي استخدام الأنواع عن طريق معلمات إلى إنشاء هياكل/دوال معروفة النوع  وبالتالي أحجام معروفة.
    
    * المراوغة `indirection` - يمنحنا وضع المثلاء (instances) في الكومة (heap) مستوى من المراوغة الذي يسمح لنا بعدم القلق بشأن حجم النوع الحالي والإكتفاء بتخزين مؤشر (pointer) له فقط. توجد طرق أخرى أيضا!
- title: الدوال المعممة (Generic Functions)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise%3CT%3E(creature%3A%20%26T)%0Awhere%0A%20%20%20%20T%3A%20NoiseMaker%2C%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    التعميم (generics) في رست (Rust) يعمل جنبًا إلى جنب مع السمات (Traits). عندما نصف نوعًا عن طريق معلمة `T`، يمكننا تقييد الأنواع التي يمكن استخدامها كوسيطة (argument) من خلال سرد السمات المطلوبة التي يجب على الوسيطة تنفيذها.


    في هذا المثال، يجب على النوع `T` تنفيذ السمة `Foo`:

    ```rust

    fn my_function<T>(foo: T)

    where
        T:Foo
    {
        ...
    }

    ```


    باستخدام التعميم(generics)، نقوم بإنشاء دوال مكتوبة ساكنة (static typed functions) في وقت الترجمة (compile time) والتي سيكون لها أنواع وأحجام معروفة، مما يسمح لنا بإجراء إرسال ساكن (static dispatch) والتخزين كقيمة ذات حجم.

- title: دالة معممة مختصرة (Generic Function Shorthand)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise(creature%3A%20%26impl%20NoiseMaker)%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: |
    يحتوي رست (Rust) على اختصار للتعبير عن التعميم المقيد بسمة ما:
    

    ```rust
    fn my_function(foo: impl Foo) {
        ...
    }
    ```

    وهذا يعادل الكتابة كما يلي:

    ```rust
    fn my_function<T>(foo: T)
    where
        T:Foo
    {
        ...
    }
    ```
- title: العلبة (Box)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Ocean%20%7B%0A%20%20%20%20animals%3A%20Vec%3CBox%3Cdyn%20NoiseMaker%3E%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22swish%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20ocean%20%3D%20Ocean%20%7B%0A%20%20%20%20%20%20%20%20animals%3A%20vec!%5BBox%3A%3Anew(ferris)%2C%20Box%3A%3Anew(sarah)%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20for%20a%20in%20ocean.animals.iter()%20%7B%0A%20%20%20%20%20%20%20%20a.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A
  content_markdown: >
    `Box` عبارة عن هيكل بيانات (data structure) يسمح لنا بنقل بياناتنا من المكدس (stack) إلى الكومة (heap).


    `Box` عبارة عن هيكل (struct) يعرف باسم *المؤشر الذكي (smart pointer)* الذي يحمل مؤشر (pointer) إلى بياناتنا الموجودة في الكومة (heap).


     نظرًا لأن `Box` عبارة عن هيكل (struct) ذو حجم معروف (لأنه يحتوي فقط على مؤشر pointer)، فغالبًا ما يتم استخدامه كطريقة لتخزين مرجع (reference) إلى شيء ما في هيكل يجب أن تكون حقوله معروفة الحجم.
     
     
     يعد `Box` شائعًا جدًا ويمكن استخدامه من أي مكان:


    ```rust

    Box::new(Foo { ... })

    ```
- title: مراجعة للهياكل المعممة (Generic Structs Revisited)
  content_markdown: >
    الهياكل المعممة يمكنها أيضًا أن تملك أنواع عن طريق معلمات (parameterized types) مقيدة بسمات.


    ```rust

    struct MyStruct<T>

    where
        T: MyTrait
    {
        foo: T
        ...
    }

    ```


     الهياكل المعممة لها نوع عن طريق معلمات خاص بها في كتلة التنفيذها (implementation blocks):


    ```rust

    impl<T> MyStruct<T> {
        ...
    }

    ```
- title: الفصل 7 - الخلاصة
  content_markdown: >
    لدينا الآن المزيد من ميزات اللغة في متناول اليد لتمثيل أفكارنا بوضوح! قد تكون التجريدات (abstractions) في رست (Rust) بسيطة لكنها قوية بما يكفي لجعل العمل مع التعليمات البرمجية أمرًا ممتعًا. في هذا الفصل، ألقينا نظرة على المؤشرات الذكية (smart pointers) باستخدام `Box`. في الفصل التالي سنتعرف على كيف يمكن للمؤشرات الذكية أن تساعدنا في وضعيات خاصة أخرى للذاكرة.


    موارد:

    * [فيديو - البرمجة كائنية التوجه في 7 دقائق](https://www.youtube.com/watch?v=pTB0EiLXUC8)
    
    * [مقال - "كلما تعلمت OOP بشكل أسرع، كان ذلك أفضل لك ولبرنامجك"](https://dpc.pw/the-faster-you-unlearn-oop-the-better-for-you-and-your-software)
